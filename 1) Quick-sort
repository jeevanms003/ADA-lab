#include <iostream>
#include <vector>
#include <cstdlib>
#include <ctime>
#include <chrono>
#include <fstream>

using namespace std;
using namespace chrono;
// Partition function for Quicksort
int partition(vector<int>& arr, int low, int high) {
    int pivot = arr[high];
    int i = low - 1;
    for(int j = low; j < high; ++j) {
        if(arr[j] < pivot) {
            ++i;
            swap(arr[i], arr[j]);
        }
    }
    swap(arr[i + 1], arr[high]);
    return i + 1;
}
// Recursive Quicksort
void quickSort(vector<int>& arr, int low, int high) {
    if(low < high) {
        int pi = partition(arr, low, high);
        quickSort(arr, low, pi - 1);
        quickSort(arr, pi + 1, high);
    }
}
// Generate a random vector of size n
vector<int> generateRandomVector(int n) {
    vector<int> vec(n);
    for(int i = 0; i < n; ++i) {
        vec[i] = rand();
    }
    return vec;
}

int main() {
    srand(time(nullptr));
    ofstream output("quicksort_times.csv");
    output << "n,Time(ms)\n";
    for(int n = 1000; n <= 10000; n += 1000) {
        vector<int> data = generateRandomVector(n);
        auto start = high_resolution_clock::now();
        quickSort(data, 0, n - 1);
        auto end = high_resolution_clock::now();
        duration<double, std::milli> elapsed = end - start;
        cout << "n = " << n << ", time takes = " << elapsed.count() << " ms" << endl;
        output << n << "," << elapsed.count() << "\n";
    }
    output.close();
    cout << "Timing data written to quicksort_times.csv" << endl;
    return 0;
}
