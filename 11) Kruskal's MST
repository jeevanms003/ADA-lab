#include <iostream>
#include <vector>
#include <algorithm>
using namespace std;

// Edge structure
struct Edge {
    int u, v, weight;
    bool operator<(Edge const& other) {
        return weight < other.weight;  // sort by weight
    }
};

// Disjoint Set Union (DSU)
class DSU {
    vector<int> parent, rank;

public:
    DSU(int n) {
        parent.resize(n);
        rank.resize(n, 0);
        for(int i = 0; i < n; i++)
            parent[i] = i;
    }

    int find(int x) {
        if (x != parent[x])
            parent[x] = find(parent[x]);  // Path compression
        return parent[x];
    }

    bool unite(int x, int y) {
        int rootX = find(x);
        int rootY = find(y);

        if (rootX == rootY)
            return false;  // They are in the same set â€” cycle!

        // Union by rank
        if (rank[rootX] < rank[rootY])
            parent[rootX] = rootY;
        else if (rank[rootX] > rank[rootY])
            parent[rootY] = rootX;
        else {
            parent[rootY] = rootX;
            rank[rootX]++;
        }
        return true;
    }
};

// Kruskal's Algorithm
int kruskalMST(int n, vector<Edge>& edges) {
    sort(edges.begin(), edges.end());  // Step 1: sort all edges
    DSU dsu(n);
    int totalCost = 0;

    cout << "Edges in the Minimum Spanning Tree:\n";
    for (Edge& e : edges) {
        if (dsu.unite(e.u, e.v)) {
            cout << e.u << " - " << e.v << " : " << e.weight << "\n";
            totalCost += e.weight;
        }
    }

    return totalCost;
}

int main() {
    int n, m;
    cout << "Enter number of vertices and edges: ";
    cin >> n >> m;

    vector<Edge> edges(m);
    cout << "Enter edges (u v weight):\n";
    for (int i = 0; i < m; i++) {
        cin >> edges[i].u >> edges[i].v >> edges[i].weight;
    }

    int cost = kruskalMST(n, edges);
    cout << "Minimum Cost of Spanning Tree: " << cost << endl;

    return 0;
}
