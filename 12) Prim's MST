#include <iostream>
#include <vector>
#include <queue>
#include <utility>
using namespace std;

const int INF = 1e9;
typedef pair<int, int> pii;

int primMST(int n, vector<vector<pii>> &adj) {
    vector<bool> inMST(n, false);
    vector<int> minWeight(n, INF);
    priority_queue<pii, vector<pii>, greater<>> pq;

    int totalCost = 0;
    minWeight[0] = 0;
    pq.push({0, 0});

    while (!pq.empty()) {
        int u = pq.top().second;
        int weight = pq.top().first;
        pq.pop();

        if (inMST[u])
            continue;

        inMST[u] = true;
        totalCost += weight;
        cout << "Included Vertex: " << u << " with edge cost: " << weight << endl;

        for (auto &[v, w] : adj[u]) {
            if (!inMST[v] && w < minWeight[v]) {
                minWeight[v] = w;
                pq.push({w, v});
            }
        }
    }

    return totalCost;
}

int main() {
    int n, m;
    cout << "Enter number of vertices and edges: ";
    cin >> n >> m;

    vector<vector<pii>> adj(n);

    cout << "Enter edges (u v weight):\n";
    for (int i = 0; i < m; i++) {
        int u, v, w;
        cin >> u >> v >> w;
        adj[u].push_back({v, w});
        adj[v].push_back({u, w});
    }

    int cost = primMST(n, adj);
    cout << "Minimum Cost of Spanning Tree: " << cost << endl;

    return 0;
}

