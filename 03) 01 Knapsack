#include <iostream>
#include <vector>
using namespace std;

// Function to solve 0/1 Knapsack using Dynamic Programming
int knapsack(int W, vector<int>& weights, vector<int>& values, int n) {
    // Create a 2D DP table
    vector<vector<int>> dp(n + 1, vector<int>(W + 1, 0));

    // Build the table bottom-up
    for (int i = 1; i <= n; i++) {
        for (int w = 0; w <= W; w++) {
            if (weights[i - 1] <= w) {
                // Include the item or exclude it, take the max
                dp[i][w] = max(
                    values[i - 1] + dp[i - 1][w - weights[i - 1]],
                    dp[i - 1][w]
                );
            } else {
                // Cannot include the item
                dp[i][w] = dp[i - 1][w];
            }
        }
    }

    return dp[n][W];  // Maximum value for n items and capacity W
}

int main() {
    int n, W;
    cout << "Enter number of items: ";
    cin >> n;

    vector<int> weights(n), values(n);

    cout << "Enter weights of items:\n";
    for (int i = 0; i < n; i++)
        cin >> weights[i];

    cout << "Enter values of items:\n";
    for (int i = 0; i < n; i++)
        cin >> values[i];

    cout << "Enter knapsack capacity: ";
    cin >> W;

    int maxValue = knapsack(W, weights, values, n);
    cout << "Maximum value in Knapsack = " << maxValue << endl;

    return 0;
}
